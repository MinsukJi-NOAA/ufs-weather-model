name: Pull request tests

on:
  push:
    branches: ['feature/PRCheck']
    #branches: ['develop']
  pull_request:
    branches: ['feature/PRCheck']
    #branches: ['develop']

jobs:
  prcheck:
    name: PR Check
    runs-on: ubuntu-20.04
    if: (${{ github.event_name }} == pull_request)

    steps:
    - name: Print out github context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Check if PR branch is current
      run: |
        head_sha=${{ github.event.pull_request.head.sha }}
        echo "Head sha is $head_sha"
        git clone ${{ github.event.pull_request.head.repo.git_url }} .
        git checkout $head_sha
        git submodule -q update --init --recursive
        cd ${GITHUB_WORKSPACE}/tests/ci
        app="Accept: application/vnd.github.v3+json"
        pr_number=$(curl -sS -H "app" https://api.github.com/repos/MinsukJi-NOAA/ufs-weather-model/pulls | ./json_helper.py get_pr $head_sha)
        echo "PR number $pr_number"
        pr_uid=${{ github.event.pull_request.head.owner.login }}
        comment_body="$(./repo-check.sh minsukji)"
        echo $comment_body

  setup:
    name: Set up
    needs: prcheck
    runs-on: ubuntu-20.04

    outputs:
      bld: ${{ steps.parse.outputs.bld }}
      test: ${{ steps.parse.outputs.test }}
      img: ${{ steps.parse.outputs.img }}
      msg: ${{ steps.check.outputs.msg }}

    steps:
    - name: Checkout codes
      uses: actions/checkout@v2

    - name: Check if run-ci is requested
      id: check
      run: |
        if [[ ${{github.event_name}} == pull_request ]]; then
          sha=${{github.event.pull_request.head.sha}}
          url=$(echo ${{github.event.pull_request.head.repo.git_commits_url}} | sed "s:{/sha}:/$sha:")
          message="$(curl -sS -H "Accept: application/vnd.github.v3+json" $url | jq '.message')"
          echo "::set-output name=msg::${message}"
        elif [[ ${{github.event_name}} == push ]]; then
          sha=${{github.event.after}}
          url=$(echo ${{github.event.repository.git_commits_url}} | sed "s:{/sha}:/$sha:")
          message="$(curl -sS -H "Accept: application/vnd.github.v3+json" $url | jq '.message')"
          echo "::set-output name=msg::${message}"
        fi

    - name: Parse cases
      id: parse
      run: |
        cd ${GITHUB_WORKSPACE}/tests/ci
        IFS='|'; parsed_output=( $(./setup.py) )
        bld_=${parsed_output[0]}
        test_=${parsed_output[1]}
        img_=ci-test-weather

        echo "::set-output name=bld::$bld_"
        echo "::set-output name=test::$test_"
        echo "::set-output name=img::$img_"

        echo "build set : $bld_"
        echo "test set  : $test_"
        echo "image name: $img_"

  build:
    name: Build ${{ matrix.bld_set }}
    needs: setup
    runs-on: ubuntu-20.04
    if: contains(needs.setup.outputs.msg, 'run-ci')

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.bld) }}

    steps:
    - name: Checkout codes
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        printf '{\n    "experimental": true\n}' | sudo tee /etc/docker/daemon.json >/dev/null
        sudo systemctl restart docker
        sleep 10
        cd tests/ci && ./ci.sh -n ${{ matrix.name }} -b ${{ matrix.case }}

    - name: Free up disk space
      run: |
        sudo docker rmi $(sudo docker image ls | grep -E -m1 '<none>' | awk '{ print $3 }')
        sudo docker rmi $(sudo docker image ls | awk '/ubuntu-hpc/ { print $3 }')

    - name: Prepare artifacts
      run: |
        cd tests/ci
        sudo docker save ${{ needs.setup.outputs.img }} | gzip >${{ needs.setup.outputs.img }}.tar.gz
        tar cvjf artifact.tar.bz2 ${{ needs.setup.outputs.img }}.tar.gz ci.sh ci.test

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.bld_set }}.artifact.tar.bz2
        path: tests/ci/artifact.tar.bz2

  utest:
    name: Test ${{ matrix.test_set }}
    needs: build
    #runs-on: self-hosted
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.test) }}

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.artifact }}.artifact.tar.bz2

    - name: Prepare artifacts
      run: |
        tar xvjf artifact.tar.bz2 && rm -f artifact.tar.bz2
        docker load --input ${{ needs.setup.outputs.img }}.tar.gz && rm -f ${{ needs.setup.outputs.img }}.tar.gz

    - name: Run utest
      run: ./ci.sh -n ${{ matrix.name }} -r ${{ matrix.case }}

    - name: Upload memory usage file
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: memory_stat_${{ matrix.test_set }}
        path: memory_stat

    - name: Clean up
      if: ${{ always() }}
      run: |
        rm -f ci.sh ci.test
        docker stop my-container && docker rm  my-container && docker rmi ${{ needs.setup.outputs.img }}:latest
        docker volume rm DataVolume
        #docker rmi minsukjinoaa/fv3-input-data:input-data-20210115
        rm -f memory_stat
